name: Repo Assistant Commands

on:
  issue_comment:
    types: [created]

permissions:
  contents: read       # 读代码
  issues: write        # 回帖
  pull-requests: write

jobs:
  show_or_ls:
    # 只允许仓库成员/协作者触发，且只处理 /show 和 /ls 命令
    if: >
      (startsWith(github.event.comment.body, '/show ') ||
       startsWith(github.event.comment.body, '/ls ')) &&
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'COLLABORATOR')
    runs-on: ubuntu-latest
    steps:
      - name: Run command
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const body = context.payload.comment.body.trim();

            async function comment(text) {
              await github.rest.issues.createComment({
                owner, repo, issue_number, body: text
              });
            }

            // 取默认分支
            const repoInfo = await github.rest.repos.get({owner, repo});
            const ref = repoInfo.data.default_branch;

            if (body.startsWith('/ls ')) {
              const path = body.slice(4).trim() || '.';
              try {
                const res = await github.rest.repos.getContent({owner, repo, path, ref});
                if (!Array.isArray(res.data)) {
                  await comment(`\`${path}\` 不是目录。`);
                  return;
                }
                const rows = res.data
                  .map(e => `${e.type === 'dir' ? '📁' : '📄'} ${e.name}`)
                  .join('\n');
                await comment(`**目录 ${path} (@${ref})**\n\n${rows || '_空_'}\n`);
              } catch (e) {
                await comment(`读取目录失败：${e.message}`);
              }
              return;
            }

            if (body.startsWith('/show ')) {
              // 格式：/show path/to/file[:start-end]
              const arg = body.slice(6).trim();
              let m = arg.match(/^(.+?):(\d+)-(\d+)$/);
              let path, start, end;
              if (m) { path = m[1]; start = +m[2]; end = +m[3]; }
              else { path = arg; }

              try {
                const res = await github.rest.repos.getContent({owner, repo, path, ref});
                if (Array.isArray(res.data) || res.data.type !== 'file') {
                  await comment(`\`${path}\` 不是普通文件。`);
                  return;
                }
                const content = Buffer.from(res.data.content, res.data.encoding).toString('utf8');
                let out = content;
                if (start && end) {
                  const lines = content.split('\n');
                  const s = Math.max(1, start);
                  const e = Math.min(lines.length, end);
                  out = lines.slice(s-1, e).map((l, i) => `${s+i}  ${l}`).join('\n');
                }
                // 限制一次返回的长度，避免超长评论
                const MAX = 55000;
                if (out.length > MAX) out = out.slice(0, MAX) + '\n... (截断)';

                await comment(`**${path} @ ${ref}**\n\n\`\`\`\n${out}\n\`\`\``);
              } catch (e) {
                await comment(`读取文件失败：${e.message}`);
              }
              return;
            }
