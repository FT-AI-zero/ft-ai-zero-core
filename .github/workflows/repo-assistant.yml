name: Repo Assistant Commands

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: read

concurrency:
  group: repo-assistant
  cancel-in-progress: true

jobs:
  run:
    # 只在 “patch-inbox” 这个收件箱 issue（#1）里响应；
    # 只对 OWNER/MEMBER/COLLABORATOR 生效；
    # 只响应 /ls /show /write 三类命令。
    if: >
      github.event.issue.number == 1 &&
      ( contains(github.event.comment.body, '/ls') ||
        contains(github.event.comment.body, '/show') ||
        contains(github.event.comment.body, '/write') ) &&
      ( github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR' )
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: Handle commands
        uses: actions/github-script@v7
        env:
          BODY: ${{ github.event.comment.body }}
        with:
          script: |
            const { context, github } = require('@actions/github');
            const core = require('@actions/core');
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const issue = context.issue;
            const body = (process.env.BODY || '').trim();

            async function reply(md) {
              await github.rest.issues.createComment({ ...issue, body: md });
            }
            function bad(msg) { return reply(`读取失败： ${msg}`); }

            // ---------- /ls ----------
            if (body.startsWith('/ls')) {
              const p = body.replace('/ls','').trim() || '.';
              if (p.includes('..')) return bad('路径不允许包含 ..');
              if (!fs.existsSync(p)) return bad('Not Found');

              // 更友好的列表
              const out = execSync(`ls -la --group-directories-first "${p}"`, {encoding:'utf8'});
              await reply(`目录 \`${p}\` (@${context.ref?.split('/').pop() || 'main'})\n\n\`\`\`\n${out}\n\`\`\``);
              return;
            }

            // ---------- /show path[:start-end] ----------
            if (body.startsWith('/show ')) {
              let arg = body.slice(6).trim();
              if (!arg) return bad('格式：/show path[:start-end]');
              if (arg.includes('..')) return bad('路径不允许包含 ..');

              let range = null;
              const m = arg.match(/:(\d+)(?:-(\d+))?$/);
              if (m) {
                range = { s: +m[1], e: +(m[2] || m[1]) };
                arg = arg.slice(0, arg.lastIndexOf(':'));
              }
              if (!fs.existsSync(arg)) return bad('Not Found');
              let lines = fs.readFileSync(arg,'utf8').split(/\r?\n/);
              if (range) lines = lines.slice(range.s-1, range.e);

              const lang = arg.split('.').pop();
              await reply(`\`${arg}\` @ ${context.payload.repository.default_branch}\n\n\`\`\`${lang}\n${lines.join('\n')}\n\`\`\``);
              return;
            }

            // ---------- /write path + code block ----------
            // 示例：
            // /write utils/example.py
            // ```py
            // print("hi")
            // ```
            if (body.startsWith('/write')) {
              const m = body.match(/^\/write\s+([^\n]+)\n+```([\w+-]*)\n([\s\S]*?)\n```/m);
              if (!m) {
                return bad('格式不正确。示例：\n`/write utils/a.py`\n```py\nprint("hi")\n```');
              }
              const p = m[1].trim();
              const lang = m[2].trim();
              const content = m[3];

              if (p.includes('..')) return bad('路径不允许包含 ..');
              if (Buffer.byteLength(content,'utf8') > 200 * 1024) return bad('内容过大（>200KB）');

              fs.mkdirSync(path.dirname(p), { recursive: true });
              fs.writeFileSync(p, content, 'utf8');

              const BR = `write-${Date.now()}`;
              execSync(`git config user.name  "chat-bot"`);
              execSync(`git config user.email "chat-bot@users.noreply.github.com"`);
              execSync(`git checkout -b "${BR}"`);
              execSync(`git add "${p}"`);
              execSync(`git commit -m "write ${p} from chat"`);
              execSync(`git push --set-upstream origin "${BR}"`);

              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: BR,
                base: context.payload.repository.default_branch,
                title: `Write ${p} from chat`,
                body: 'Auto-created from issue comment.',
                maintainer_can_modify: true
              });
              await reply(`已创建 PR：${pr.data.html_url}`);
              return;
            }

            await reply('未识别到命令（支持：`/ls`、`/show`、`/write`）。');
