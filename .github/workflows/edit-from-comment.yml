name: Edit Files From Comment

on:
  issue_comment:
    types: [created]

permissions:
  contents: write        # 需要写入分支
  pull-requests: write   # 需要开 PR
  issues: write          # 回评论

concurrency:
  group: patch-inbox
  cancel-in-progress: true

jobs:
  edit:
    # 仅 OWNER / MEMBER / COLLABORATOR，且必须包含 /write
    if: >
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'COLLABORATOR')
      && contains(github.event.comment.body, '/write')
      && github.event.comment.user.type != 'Bot'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply /write and open PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            const author = context.payload.comment.user.login;
            const body   = context.payload.comment.body || '';

            const say = (md) => github.rest.issues.createComment({ owner, repo, issue_number, body: md });

            const path = require('path');
            const fs   = require('fs');
            const cp   = require('child_process');

            // 允许的顶级目录与后缀（避免写二进制/工作流）
            const ALLOW_TOP = new Set(['', '.', 'core','utils','scripts','jobs','strategy','collectors','ailearning','data']);
            const ALLOW_EXT = new Set(['.md','.txt','.py','.json','.yaml','.yml','.toml','.ini','.cfg','.gitignore']);
            const MAX_BYTES = 64 * 1024;

            // 解析 "/write path"（允许两边留白）
            const header = body.match(/^\s*\/write\s+(.+?)\s*$/m);
            // 解析 ```lang\r?\n ... \r?\n```
            const fence  = body.match(/```[^\r\n]*\r?\n([\s\S]*?)\r?\n```/);

            if (!header || !fence) {
              await say('用法：\n```\n/write path/to/file\n```lang\n<内容>\n```\n（会创建分支并发起 PR）');
              return;
            }

            // 规范化与校验路径
            function norm(p) {
              p = String(p).trim().replace(/^\/+/, '').replace(/\\+/g, '/');
              if (!p || p.includes('..') || p.startsWith('.git') || p.startsWith('.github/')) return null;
              return p;
            }
            const rel = norm(header[1]);
            if (!rel) { await say('写入失败：路径不合法'); return; }

            const top = rel.split('/')[0] || '';
            if (!ALLOW_TOP.has(top)) {
              await say(`写入失败：只允许根目录或这些顶级目录：${Array.from(ALLOW_TOP).join(', ')}`);
              return;
            }

            const ext = path.extname(rel).toLowerCase();
            if (!ALLOW_EXT.has(ext)) {
              await say(`写入失败：不允许的后缀 \`${ext}\``);
              return;
            }

            const content = fence[1];
            if (Buffer.byteLength(content, 'utf8') > MAX_BYTES) {
              await say(`写入失败：内容超过 ${MAX_BYTES} bytes`);
              return;
            }

            // 新分支 -> 写入 -> 提交 -> 推送 -> 开 PR
            const br  = `chat-edit-${Date.now()}`;
            const abs = path.resolve(process.cwd(), rel);

            cp.execSync(`git checkout -b ${br}`, { stdio: 'inherit' });
            fs.mkdirSync(path.dirname(abs), { recursive: true });
            fs.writeFileSync(abs, content, 'utf8');

            cp.execSync('git config user.name "chat-bot"', { stdio: 'inherit' });
            cp.execSync('git config user.email "chat-bot@users.noreply.github.com"', { stdio: 'inherit' });
            cp.execSync(`git add -- "${rel}"`, { stdio: 'inherit' });

            // 如果没有变化就给出提示
            try {
              cp.execSync(`git diff --cached --quiet -- "${rel}"`);
              await say(`没有变化：\`${rel}\``);
              return;
            } catch {}

            cp.execSync(`git commit -m "edit: ${rel} (via /write by ${author})"`, { stdio: 'inherit' });
            cp.execSync(`git push origin ${br}`, { stdio: 'inherit' });

            const info = await github.rest.repos.get({ owner, repo });
            const base = info.data.default_branch;

            const pr = await github.rest.pulls.create({
              owner, repo, head: br, base,
              title: `Edit from comment: ${rel}`,
              body: `由 @${author} 通过 \`/write\` 创建。\n\n- 文件：\`${rel}\``
            });

            await say(`已创建 PR：${pr.data.html_url}`);
