name: Edit Files From Comment

on:
  issue_comment:
    types: [created]

permissions:
  contents: write          # 需要写入分支
  pull-requests: write     # 需要开 PR
  issues: write            # 回评论

concurrency:
  group: edit-from-comment-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  edit:
    # 仅 OWNER/MEMBER/COLLABORATOR；忽略 bot；只在包含 /write 时触发
    if: >
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'COLLABORATOR')
      && !startsWith(github.event.comment.user.login, 'github-actions')
      && contains(github.event.comment.body, '/write ')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply /write and open PR
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const issue_number = context.payload.issue.number;
            const author = context.payload.comment.user.login;
            const body = context.payload.comment.body || '';

            function say(md){ return github.rest.issues.createComment({owner, repo, issue_number, body: md}); }

            const path = require('path');
            const fs   = require('fs');
            const cp   = require('child_process');

            // 允许写入的后缀与目录（避免写二进制/工作流）
            const ALLOW_EXT = new Set(['.md','.txt','.py','.json','.yaml','.yml','.toml','.ini','.cfg','.gitignore']);
            const ALLOW_TOP = new Set(['core','utils','scripts','jobs','strategy','collectors','ailearning','data','.', '']); // 根或这些一层
            const MAX_BYTES = 64 * 1024;

            // 解析：
            //   /write path/to/file
            //   ```lang
            //   文件内容...
            //   ```
            const header = body.match(/^\/write\s+([^\s]+)\s*$/m);
            const fence  = body.match(/```[a-zA-Z0-9_-]*\n([\s\S]*?)\n```/m);
            if (!header || !fence) {
              await say('用法：\n```\n/write path/to/file\n```lang\n<内容>\n```\n（会创建分支并发起 PR）');
              return;
            }

            function norm(p){
              p = (p || '').trim().replace(/^\/+/, '').replace(/\\+/g,'/');
              if (p.includes('..') || p.startsWith('.git') || p.startsWith('.github/') || p.includes('\0')) return null;
              return p;
            }

            const rel = norm(header[1]);
            if (!rel) { await say('写入失败：路径不合法'); return; }

            const top = rel.split('/')[0] || '';
            if (!ALLOW_TOP.has(top)) { await say(`写入失败：只允许根目录或这些顶级目录：${Array.from(ALLOW_TOP).join(', ')}`); return; }

            const ext = path.extname(rel).toLowerCase();
            if (!ALLOW_EXT.has(ext)) { await say(`写入失败：不允许的后缀 \`${ext}\``); return; }

            let content = fence[1];
            if (Buffer.byteLength(content, 'utf8') > MAX_BYTES) {
              await say(`写入失败：内容超过 ${MAX_BYTES} bytes`);
              return;
            }

            // 写入到工作区 → 新分支 → 提交 → 推送 → 开 PR
            const br = `chat-edit-${Date.now()}`;
            cp.execSync(`git checkout -b ${br}`, {stdio:'inherit'});
            const abs = path.resolve(process.cwd(), rel);
            fs.mkdirSync(path.dirname(abs), {recursive: true});
            fs.writeFileSync(abs, content, 'utf8');

            cp.execSync('git config user.name "chat-bot"', {stdio:'inherit'});
            cp.execSync('git config user.email "chat-bot@users.noreply.github.com"', {stdio:'inherit'});
            cp.execSync(`git add -- "${rel}"`, {stdio:'inherit'});
            cp.execSync(`git commit -m "edit: ${rel} (via /write by ${author})"`, {stdio:'inherit'});
            cp.execSync(`git push origin ${br}`, {stdio:'inherit'});

            // 找默认分支作为 base
            const info = await github.rest.repos.get({owner, repo});
            const base = info.data.default_branch;

            const pr = await github.rest.pulls.create({
              owner, repo, head: br, base,
              title: `Edit from comment: ${rel}`,
              body: `由 @${author} 通过 \`/write\` 创建。\n\n- 文件：\`${rel}\``
            });

            await say(`已创建 PR：${pr.data.html_url}`);
