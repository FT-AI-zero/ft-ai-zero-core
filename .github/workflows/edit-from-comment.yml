name: Edit Files From Comment

on:
  issue_comment:
    types: [created]

permissions:
  contents: write         # 允许写代码
  pull-requests: write
  issues: write

jobs:
  write_file:
    # 只允许 OWNER / MEMBER / COLLABORATOR，且命令以 /write 开头
    if: >
      startsWith(github.event.comment.body, '/write ') &&
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'COLLABORATOR')
    runs-on: ubuntu-latest
    steps:
      - name: Write file and open PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const body = context.payload.comment.body;

            async function reply(text) {
              await github.rest.issues.createComment({ owner, repo, issue_number, body: text });
            }

            // 解析：/write path/to/file  + 下面首个代码块内容
            const m = body.match(/^\/write\s+(\S+)[\s\S]*?```[\s\S]*?\n([\s\S]*?)\n```/);
            if (!m) {
              await reply([
                '用法：',
                '```',
                '/write path/to/file',
                '```lang(随便写)',
                '这里是文件完整内容（会覆盖/新建）',
                '```',
              ].join('\n'));
              return;
            }
            const path = m[1];
            const newContent = m[2];

            // 限制长度，避免评论超长
            if (newContent.length > 60000) {
              await reply('内容过长（>60k），请拆分或使用 patch 方式。');
              return;
            }

            // 获取默认分支
            const repoInfo = await github.rest.repos.get({ owner, repo });
            const base = repoInfo.data.default_branch;

            // 以默认分支创建新分支
            const baseRef = await github.rest.git.getRef({ owner, repo, ref: `heads/${base}` });
            const newBranch = `chatwrite-${Date.now()}`;
            await github.rest.git.createRef({
              owner, repo,
              ref: `refs/heads/${newBranch}`,
              sha: baseRef.data.object.sha,
            });

            // 读取现有文件（如果存在则需要 sha）
            let existingSha = undefined;
            try {
              const cur = await github.rest.repos.getContent({ owner, repo, path, ref: base });
              if (!Array.isArray(cur.data) && cur.data.type === 'file') {
                existingSha = cur.data.sha;
              }
            } catch (e) {
              // 文件不存在也没关系
            }

            // 写入（创建或覆盖）
            await github.rest.repos.createOrUpdateFileContents({
              owner, repo,
              path,
              message: `write ${path} from comment`,
              content: Buffer.from(newContent, 'utf8').toString('base64'),
              branch: newBranch,
              sha: existingSha,
            });

            // 开 PR
            const pr = await github.rest.pulls.create({
              owner, repo,
              title: `Edit ${path} from comment`,
              body: 'Auto-created from issue comment via /write.',
              head: newBranch,
              base,
              maintainer_can_modify: true,
            });

            await reply(`已创建 PR: ${pr.data.html_url}`);

  replace_text:
    # 只允许 OWNER / MEMBER / COLLABORATOR，且命令以 /replace 开头
    if: >
      startsWith(github.event.comment.body, '/replace ') &&
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'COLLABORATOR')
    runs-on: ubuntu-latest
    steps:
      - name: Replace text in a file and open PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const body = context.payload.comment.body;

            async function reply(text) {
              await github.rest.issues.createComment({ owner, repo, issue_number, body: text });
            }

            // 解析：/replace path "from" => "to"
            const m = body.match(/^\/replace\s+(\S+)\s+"([\s\S]*?)"\s*=>\s*"([\s\S]*?)"/);
            if (!m) {
              await reply('用法：/replace path/to/file "from" => "to"');
              return;
            }
            const path = m[1];
            const from = m[2];
            const to = m[3];

            // 获取默认分支
            const repoInfo = await github.rest.repos.get({ owner, repo });
            const base = repoInfo.data.default_branch;

            // 读取文件
            let file;
            try {
              file = await github.rest.repos.getContent({ owner, repo, path, ref: base });
            } catch (e) {
              await reply(`读取 \`${path}\` 失败：${e.message}`);
              return;
            }
            if (Array.isArray(file.data) || file.data.type !== 'file') {
              await reply(`\`${path}\` 不是普通文件。`);
              return;
            }

            const oldContent = Buffer.from(file.data.content, file.data.encoding).toString('utf8');
            const newContent = oldContent.split(from).join(to);

            if (newContent === oldContent) {
              await reply('没有找到要替换的内容。');
              return;
            }

            // 创建新分支
            const baseRef = await github.rest.git.getRef({ owner, repo, ref: `heads/${base}` });
            const newBranch = `chatreplace-${Date.now()}`;
            await github.rest.git.createRef({
              owner, repo,
              ref: `refs/heads/${newBranch}`,
              sha: baseRef.data.object.sha,
            });

            // 更新文件
            await github.rest.repos.createOrUpdateFileContents({
              owner, repo,
              path,
              message: `replace in ${path} from comment`,
              content: Buffer.from(newContent, 'utf8').toString('base64'),
              branch: newBranch,
              sha: file.data.sha,
            });

            // 开 PR
            const pr = await github.rest.pulls.create({
              owner, repo,
              title: `Replace in ${path} from comment`,
              body: `Auto-replaced from: "${from}" => "${to}" via /replace command.`,
              head: newBranch,
              base,
              maintainer_can_modify: true,
            });

            await reply(`已创建 PR: ${pr.data.html_url}`);
