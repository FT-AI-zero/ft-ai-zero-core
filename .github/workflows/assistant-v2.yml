name: Repo Assistant v2

on:
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  handle:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && github.event.issue.number == 1 && startsWith(github.event.comment.body, '/')) }}
    runs-on: [self-hosted, zero]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Parse command
        id: parse
        shell: pwsh
        run: |
          $b = @"
          ${{ github.event.comment.body }}
          "@.Trim()
          $cmd = ''
          if ($b -match '^\s*/diag\b') { $cmd='diag' }
          elseif ($b -match '^\s*/path-audit\b') { $cmd='path-audit' }
          elseif ($b -match '^\s*/data-map\b') { $cmd='data-map' }
          echo "cmd=$cmd" >> $env:GITHUB_OUTPUT

      - name: Run (${{ steps.parse.outputs.cmd }})
        if: steps.parse.outputs.cmd != ''
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path reports | Out-Null
          $cmd='${{ steps.parse.outputs.cmd }}'
          if ($cmd -eq 'diag') {
            $info = @(
              "Runner: $env:RUNNER_NAME",
              "OS: $env:RUNNER_OS",
              "Arch: $env:PROCESSOR_ARCHITECTURE",
              "WorkDir: $env:GITHUB_WORKSPACE",
              "Repo: $env:GITHUB_REPOSITORY",
              "Ref: $env:GITHUB_REF"
            ) -join "`n"
            Set-Content reports/diag.txt $info
          }
          elseif ($cmd -eq 'path-audit') {
            pip install --upgrade pip >$null
            pip install ruff radon >$null
            python - << 'PY'
import re,glob,json
bad=[]
PATTERNS=[r'\bopen\(',r'\bread_csv\(',r'\bto_csv\(',r'\bos\.path\.',r'Path\(']
for p in glob.glob('**/*.py', recursive=True):
    try: s=open(p,'r',encoding='utf-8',errors='ignore').read()
    except: continue
    hits=[]
    for pat in PATTERNS:
        if re.search(pat,s): hits.append(pat)
    if hits: bad.append({"file":p,"hits":len(hits)})
open('reports/path_audit.json','w',encoding='utf-8').write(json.dumps(bad,indent=2,ensure_ascii=False))
PY
          }
          elseif ($cmd -eq 'data-map') {
            python - << 'PY'
import re,glob,json
edges=[]
for p in glob.glob('**/*.py', recursive=True):
    try: s=open(p,'r',encoding='utf-8',errors='ignore').read()
    except: continue
    for m in re.finditer(r"(?:open|read_csv|to_csv)\((?:'|\")([^'\" ]+)", s):
        edges.append({"file":p,"path":m.group(1)})
open('reports/data_map.json','w',encoding='utf-8').write(json.dumps(edges,indent=2,ensure_ascii=False))
PY
          }

      - name: Upload artifacts
        if: steps.parse.outputs.cmd != ''
        uses: actions/upload-artifact@v4
        with:
          name: assistant-v2-${{ steps.parse.outputs.cmd }}
          path: reports

      - name: Comment back
        if: steps.parse.outputs.cmd != ''
        uses: actions/github-script@v7
        with:
          script: |
            const run = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${context.runId}`;
            const cmd = `${{ steps.parse.outputs.cmd }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: 1,
              body: `✅ **${cmd}** 完成（runner: ${process.env.RUNNER_NAME}）。Artifacts: assistant-v2-${cmd}。\n[查看运行日志](${run})`
            });
