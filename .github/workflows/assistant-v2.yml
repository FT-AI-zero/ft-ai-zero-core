name: Repo Assistant v2

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      cmd:
        description: "Command to run"
        type: choice
        options: [diag, path-audit, data-map]
        default: diag
        required: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  handle:
    # 允许按钮手动触发 / Issue 评论两种来源
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'issue_comment' }}
    runs-on: [self-hosted, zero]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse command
        id: parse
        shell: pwsh
        run: |
          $event = '${{ github.event_name }}'
          $cmd = ''
          if ($event -eq 'workflow_dispatch') {
            $input = '${{ github.event.inputs.cmd }}'
            if ($input) { $cmd = $input }
          } else {
            $b = @"
            ${{ github.event.comment.body }}
            "@.Trim()
            if ($b -match '^\s*/diag\b') { $cmd='diag' }
            elseif ($b -match '^\s*/path-audit\b') { $cmd='path-audit' }
            elseif ($b -match '^\s*/data-map\b') { $cmd='data-map' }
          }
          echo "cmd=$cmd" >> $env:GITHUB_OUTPUT

      - name: Setup Python 3.11 (only when needed)
        if: ${{ steps.parse.outputs.cmd == 'path-audit' || steps.parse.outputs.cmd == 'data-map' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # /diag：不依赖 Python
      - name: Run (diag)
        if: ${{ steps.parse.outputs.cmd == 'diag' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path reports | Out-Null
          $info = @(
            "Runner: $env:RUNNER_NAME",
            "OS: $env:RUNNER_OS",
            "Arch: $env:PROCESSOR_ARCHITECTURE",
            "WorkDir: $env:GITHUB_WORKSPACE",
            "Repo: $env:GITHUB_REPOSITORY",
            "Ref: $env:GITHUB_REF"
          ) -join "`n"
          Set-Content reports/diag.txt $info -Encoding UTF8

      # /path-audit：只用标准库，避免 here-string 导致的 YAML 解析问题
      - name: Run (path-audit)
        if: ${{ steps.parse.outputs.cmd == 'path-audit' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p reports
          python - <<'PY'
          import re, glob, json
          bad = []
          PATTERNS = [r'\bopen\(', r'\bread_csv\(', r'\bto_csv\(', r'\bos\.path\.', r'Path\(']
          for p in glob.glob('**/*.py', recursive=True):
              try:
                  with open(p, 'r', encoding='utf-8', errors='ignore') as f:
                      s = f.read()
              except Exception:
                  continue
              hits = sum(1 for pat in PATTERNS if re.search(pat, s))
              if hits:
                  bad.append({"file": p, "hits": hits})
          with open('reports/path_audit.json', 'w', encoding='utf-8') as f:
              json.dump(bad, f, indent=2, ensure_ascii=False)
          PY

      # /data-map：同样只用标准库
      - name: Run (data-map)
        if: ${{ steps.parse.outputs.cmd == 'data-map' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p reports
          python - <<'PY'
          import re, glob, json
          edges = []
          for p in glob.glob('**/*.py', recursive=True):
              try:
                  with open(p, 'r', encoding='utf-8', errors='ignore') as f:
                      s = f.read()
              except Exception:
                  continue
              for m in re.finditer(r"(?:open|read_csv|to_csv)\((?:'|\")([^'\" ]+)", s):
                  edges.append({"file": p, "path": m.group(1)})
          with open('reports/data_map.json', 'w', encoding='utf-8') as f:
              json.dump(edges, f, indent=2, ensure_ascii=False)
          PY

      - name: Upload artifacts
        if: ${{ steps.parse.outputs.cmd != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: assistant-v2-${{ steps.parse.outputs.cmd }}
          path: reports

      - name: Comment back
        if: ${{ steps.parse.outputs.cmd != '' && github.event_name == 'issue_comment' }}
        uses: actions/github-script@v7
        with:
          script: |
            const run = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${context.runId}`;
            const cmd = `${{ steps.parse.outputs.cmd }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 1,
              body: `✅ **${cmd}** 完成（runner: ${process.env.RUNNER_NAME}）。Artifacts: assistant-v2-${cmd}。\n[查看运行日志](${run})`
            });
