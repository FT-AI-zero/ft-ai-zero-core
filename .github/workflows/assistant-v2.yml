name: Repo Assistant v2

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      cmd:
        description: "Command to run (diag|path-audit|data-map)"
        required: false
        default: diag

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  handle:
    # 允许两种触发来源：按钮手动触发 / Issue 评论
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'issue_comment' }}
    runs-on: [self-hosted, zero]

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 只用 PowerShell 解析命令，避免早期步骤就出错
      - name: Parse command
        id: parse
        shell: pwsh
        run: |
          $event = '${{ github.event_name }}'
          $cmd = ''
          if ($event -eq 'workflow_dispatch') {
            $input = '${{ github.event.inputs.cmd }}'
            if ($input) { $cmd = $input }
          } else {
            $b = @"
            ${{ github.event.comment.body }}
            "@.Trim()
            if ($b -match '^\s*/diag\b') { $cmd='diag' }
            elseif ($b -match '^\s*/path-audit\b') { $cmd='path-audit' }
            elseif ($b -match '^\s*/data-map\b') { $cmd='data-map' }
          }
          echo "cmd=$cmd" >> $env:GITHUB_OUTPUT

      # 仅当需要运行 Python 脚本时才安装 Python（/diag 不需要）
      - name: Setup Python 3.11 (only when needed)
        if: ${{ steps.parse.outputs.cmd != '' && steps.parse.outputs.cmd != 'diag' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # /diag：不需要 Python、也不需要联网
      - name: Run (diag)
        if: ${{ steps.parse.outputs.cmd == 'diag' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path reports | Out-Null
          $info = @(
            "Runner: $env:RUNNER_NAME",
            "OS: $env:RUNNER_OS",
            "Arch: $env:PROCESSOR_ARCHITECTURE",
            "WorkDir: $env:GITHUB_WORKSPACE",
            "Repo: $env:GITHUB_REPOSITORY",
            "Ref: $env:GITHUB_REF"
          ) -join "`n"
          Set-Content reports/diag.txt $info

      # /path-audit：仅用标准库，避免依赖安装
      - name: Run (path-audit)
        if: ${{ steps.parse.outputs.cmd == 'path-audit' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path reports | Out-Null
          @'
import re,glob,json,io
bad=[]
PATTERNS=[r'\bopen\(',r'\bread_csv\(',r'\bto_csv\(',r'\bos\.path\.',r'Path\(']
for p in glob.glob('**/*.py', recursive=True):
    try:
        s=io.open(p,'r',encoding='utf-8',errors='ignore').read()
    except:
        continue
    hits=sum(1 for pat in PATTERNS if re.search(pat,s))
    if hits:
        bad.append({"file":p,"hits":hits})
io.open('reports/path_audit.json','w',encoding='utf-8').write(json.dumps(bad,indent=2,ensure_ascii=False))
'@ | python -

      # /data-map：同样只用标准库
      - name: Run (data-map)
        if: ${{ steps.parse.outputs.cmd == 'data-map' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path reports | Out-Null
          @'
import re,glob,json,io
edges=[]
for p in glob.glob('**/*.py', recursive=True):
    try:
        s=io.open(p,'r',encoding='utf-8',errors='ignore').read()
    except:
        continue
    for m in re.finditer(r"(?:open|read_csv|to_csv)\((?:'|\")([^'\" ]+)", s):
        edges.append({"file":p,"path":m.group(1)})
io.open('reports/data_map.json','w',encoding='utf-8').write(json.dumps(edges,indent=2,ensure_ascii=False))
'@ | python -

      - name: Upload artifacts
        if: ${{ steps.parse.outputs.cmd != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: assistant-v2-${{ steps.parse.outputs.cmd }}
          path: reports

      - name: Comment back
        if: ${{ steps.parse.outputs.cmd != '' && github.event_name == 'issue_comment' }}
        uses: actions/github-script@v7
        with:
          script: |
            const run = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${context.runId}`;
            const cmd = `${{ steps.parse.outputs.cmd }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: 1,
              body: `✅ **${cmd}** 完成（runner: ${process.env.RUNNER_NAME}）。Artifacts: assistant-v2-${cmd}。\n[查看运行日志](${run})`
            });
