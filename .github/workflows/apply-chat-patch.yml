concurrency:
  group: patch-inbox
  cancel-in-progress: true

name: Apply Patch From Comment

on:
  issue_comment:
    types: [created]

# 需要写代码 & 开 PR 权限
permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    # 只有包含 ```patch 的评论才触发；并且评论者必须是成员/协作者/Owner
    if: >
      if: contains(github.event.comment.body, '```patch') &&
      ( github.event.comment.author_association == 'OWNER' ||
      github.event.comment.author_association == 'MEMBER' ||
      github.event.comment.author_association == 'COLLABORATOR' )

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract patch from comment
        run: |
          python - <<'PY'
          import os, json, re
          ev = json.load(open(os.environ['GITHUB_EVENT_PATH'], 'r', encoding='utf-8'))
          m = re.search(r"```patch\s*(.*?)```", ev["comment"]["body"], re.S|re.I)
          assert m, "No ```patch``` block found in the comment"
          open("chat.patch","w",encoding="utf-8").write(m.group(1))
          PY

      - name: Create branch, apply and push
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          BR="chatpatch-$(date +%s)"
          echo "BRANCH=$BR" >> "$GITHUB_ENV"

          git config user.name  "chat-bot"
          git config user.email "chat-bot@users.noreply.github.com"

          git checkout -b "$BR"

          # 关键：将补丁直接应用到 index（不会把 chat.patch 本身加入提交）
          # --3way 尝试三方合并；--whitespace=fix 自动修正空白问题
          git apply --index --3way --whitespace=fix chat.patch

          # 双保险：确保补丁文件不会被提交
          git rm --cached -f chat.patch 2>/dev/null || true
          rm -f chat.patch || true

          git commit -m "Patch from chat"
          git push origin "$BR"

      - name: Open PR via API
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 你现有的脚本不变

            const { owner, repo } = context.repo;
            const head = process.env.BRANCH;
            if (!head) { core.setFailed('BRANCH env missing'); return; }

            // 以默认分支为 base
            const info = await github.rest.repos.get({ owner, repo });
            const base = info.data.default_branch;

            // 创建 PR
            const pr = await github.rest.pulls.create({
              owner, repo, head, base,
              title: 'Patch from chat',
              body: 'Auto-created from issue comment.',
              maintainer_can_modify: true,
            });

            core.info(`PR -> ${pr.data.html_url}`);
